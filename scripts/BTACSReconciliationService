import com.rameses.annotations.*;
import com.rameses.util.*;
import java.rmi.server.*;
import com.rameses.common.*
import com.rameses.services.extended.*
import org.codehaus.groovy.runtime.TimeCategory

class BTACSReconciliationService {

	@ActiveDB(value='btacskiosk', em='btacs')
	def em;

	@ActiveDB(value='CHECKINOUT', em='btacs')
	def emcio;

	@ActiveDB(value='USER_SPEDAY', em='btacs')
	def ems;

	@Service("SequenceService")
	def seqSvc;

	@Service("DateService")
    def dtsvc

	@ProxyMethod
	public def lookupBTACSOffice( params) {
		if (! params) params = [:]
		params.searchtext = (params.searchtext && params.searchtext.trim().length() > 0 ? params.searchtext : '') + '%'
		
		params.filter = ''' AND DEPTNAME LIKE $P{searchtext} '''
		return em.getOfficeList(params)
	}

	@ProxyMethod
	public def getReconciliationItems(params) {
		def employees = em.getEmployeeList([deptid:params.office.DEPTID])
		
		params.currentyear = dtsvc.getServerYear();
		params.selectedmonth = params.month.index
		def items = []
		employees.each{ x ->
			params.userid = x.USERID;
			def blanklogs = em.getReconciliationItems(params)
			//if(item.size > 0){
				blanklogs.each{ o ->
					// println it
					o.name = x.NAME
					o.userid = x.USERID
					o.gender = x.GENDER
					o.jobtitle = x.TITLE
					o.brn = createBRN()
					// o.penalty = [:]
					// o.reason = [:]
					def f = new java.text.SimpleDateFormat("yyyy-MM-dd hh:mm:ss.S");
			        Date d = f.parse(o.dateend.toString());
			        def time = new java.text.SimpleDateFormat("a");
			        o.ampm = time.format(d)
					o.duty = o.datestart.toString() + " - " + o.dateend.toString()
					items.add(o)
				}
			//}
			
			
		}
		// println items
		return items;
		 
	}


	@ProxyMethod
	public def getLeaveClass() {
		def lc = em.getLeaveClass();
		lc.add([LeaveName:"CHIEF LOGS"]);
		lc.add([LeaveName:"FORGOT TO LOG"]);
		lc.add([LeaveName:"BROWNOUT"]);
		lc.add([LeaveName:"CONVOCATION"]);
		return lc;
		 
	}

	@ProxyMethod
	public def getPenaltyList() {
		return em.getPenaltyList();
		 
	}

	public def createBRN(def o) {
		def appcode = "BRN"
		return appcode+seqSvc.getNextFormattedSeries(appcode);
	}


	@Async
	@ProxyMethod
    public def processReconciliation(entity,reconciliationitems){
    	def grouprecitem = reconciliationitems.groupBy({it.userid})
    	grouprecitem.each{
    		def reccount = em.findReconciliationCount([USERID:it.key,YAER:entity.year,MONTH:entity.month.index])
    		println reccount
			it.value.each{ri ->
				switch(ri.reason){
		            case "CHIEF LOGS":
		               	if(!ri.DateLogin){
				    		ri.CHECKTIME = ri.StartTime
				    		ri.CHECKTYPE = "I"
				    		reconcileblanklog(ri)
				    	}

				    	if(!ri.DateLogout){
				    		ri.CHECKTIME = ri.EndTime
				    		ri.CHECKTYPE = "O"
				    		reconcileblanklog(ri)
				    	}
		            break;
		            case "BROWNOUT":
		                if(!ri.DateLogin){
				    		ri.CHECKTIME = ri.StartTime
				    		ri.CHECKTYPE = "I"
				    		reconcileblanklog(ri)
				    	}

				    	if(!ri.DateLogout){
				    		ri.CHECKTIME = ri.EndTime
				    		ri.CHECKTYPE = "O"
				    		reconcileblanklog(ri)
				    	}
		            break;
		            case "CONVOCATION":
		                if(!ri.DateLogin){
				    		ri.CHECKTIME = ri.StartTime
				    		ri.CHECKTYPE = "I"
				    		reconcileblanklog(ri)
				    	}

				    	if(!ri.DateLogout){
				    		ri.CHECKTIME = ri.EndTime
				    		ri.CHECKTYPE = "O"
				    		reconcileblanklog(ri)
				    	}
		            break;
		            case "FORGOT TO LOG":
		            	if (ri.DateLogin == null && reccount.ftlcount < 3){
		            		ri.CHECKTYPE = "I"
		            		if (reccount.ftlcount == 0){
						    	ri.CHECKTIME = ri.StartTime
						    	reconcileblanklog(ri)
						    	reccount.ftlcount ++;
			                }else if(reccount.ftlcount == 1){
						    	ri.CHECKTIME = penalty(ri.StartTime,30)
						    	reconcileblanklog(ri)
						    	reccount.ftlcount ++;
			                }else if(reccount.ftlcount == 2){
						    	ri.CHECKTIME = penalty(ri.StartTime,60)
						    	reconcileblanklog(ri)
						    	reccount.ftlcount ++;
			                }
		            	}
		            	if(ri.DateLogout == null && reccount.ftlcount < 3){
		            		ri.CHECKTYPE = "O"
		            		if (reccount.ftlcount == 0){
						    	ri.CHECKTIME = ri.EndTime
						    	reconcileblanklog(ri)
						    	reccount.ftlcount ++;
			                }else if(reccount.ftlcount == 1){
						    	ri.CHECKTIME = penalty(ri.EndTime,30)
						    	reconcileblanklog(ri)
						    	reccount.ftlcount ++;
			                }else if(reccount.ftlcount == 2){
						    	ri.CHECKTIME = penalty(ri.EndTime,60)
						    	reconcileblanklog(ri)
						    	reccount.ftlcount ++;
			                }
		            	}
		                
		            break;
		            default:
		            	def lc = em.findLeaveClass([leavename:ri.reason])
		            	if(lc){
		            		reconcileleaveclass(ri,lc)
		            	}
		            	// throw new Exception("Data may have changed for BRN:" + ri.brn + " please recreate the transaction"); 
		            break;
					}
			}
    	}
			
		return "OK";

    }

    @ProxyMethod
    void verifyitem(o,ri){
    	if(!em.findReconciliationItem([MONTH:o.month.index,YEAR:o.year,USERID:ri.userid,DATESTART:ri.datestart,DATEEND:ri.dateend])){
    		throw new Exception("Data may have changed for BRN:" + ri.brn + " please recreate the transaction"); 
    	}

    	// if(em.findReconciliationCount([MONTH:o.month.index,YEAR:o.year,USERID:ri.userid]).ftlcount > 3 && ri.reason == "FORGOT TO LOG"){
    	// 	throw new Exception("FORGOT TO LOG count for BRN:" + ri.brn + "  is greater than 3. Reconciliation for this item is not allowed."); 
    	// } 
    }

    private def reconcileblanklog(ri){
    	def cio = [
    		USERID : ri.userid,
    		CHECKTIME : ri.CHECKTIME,
    		CHECKTYPE : ri.CHECKTYPE,
    		VERIFYCODE : 0,
    		SENSORID : null,
    		Memoinfo : "SYSTEM " + ri.reason,
    		WorkCode : 0,
    		sn : null,
    		UserExtFmt:null,
    	]
    	
    	emcio.create(cio);
    }

    private def reconcileleaveclass(ri,lc){
    	def cio = [
    		USERID : ri.userid,
    		STARTSPECDAY : ri.StartTime,
    		ENDSPECDAY : ri.EndTime,
    		DATEID : lc.LeaveId,
    		YUANYING : lc.LeaveName,
    		DATE : dtsvc.getServerDate(),
    	]
    	println cio
    	ems.create(cio);
    }

    private def penalty(o,p){
    	def f = new java.text.SimpleDateFormat("yyyy-MM-dd HH:mm:ss.S");
        Date d = f.parse(o.toString());
        use(TimeCategory ) {
		    d = d + p.minutes
		}
        return new java.sql.Timestamp( d.time);
    }

    


}
